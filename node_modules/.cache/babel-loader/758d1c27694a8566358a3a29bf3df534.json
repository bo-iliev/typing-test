{"ast":null,"code":"var _jsxFileName = \"/Users/bo-iliev/code/Projects/typing-test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport useCountDown from 'react-countdown-hook';\nimport './App.css'; // to calculate typing speed\n// words typed / minutes\n// words typed = (characters - typos) / 5\n\nconst secondsToCount = 10;\nconst paragraph = `Coding is the best. We are able to build something from scratch. It is literally imagination incarnate. Solving our own problems through coding is one of the coolest things we could do!`;\n\nfunction findTypos(str1, str2) {\n  let typos = [];\n  str2.split('').forEach(function (character, index) {\n    if (character !== str1.charAt(index)) typos.push(index);\n  });\n  return typos;\n}\n\nexport default function App() {\n  const [timeLeft, {\n    start,\n    reset\n  }] = useCountDown(secondsToCount * 1000, 100);\n  const [typedText, setTypedText] = useState('');\n  const [typoIndexes, setTypoIndexes] = useState([]);\n  useEffect(() => {\n    setTypoIndexes(findTypos(paragraph, typedText));\n  }, [typedText]);\n  useEffect(() => {\n    if (typedText.length === 0) return;\n    if (timeLeft !== 0) return;\n    const wordsTyped = (typedText.length - typoIndexes.length) / 5;\n    const minMul = 60 / secondsToCount;\n    const wpm = wordsTyped * minMul;\n    alert(`You typed at ${wpm.toFixed(2)} WPM.`);\n  }, [timeLeft]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, (timeLeft / 1000).toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: () => start(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"reset\",\n    onClick: () => reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, paragraph.split('').map((character, index) => {\n    let characterClass = '';\n    const hasBeenTyped = typedText.length > index;\n\n    if (hasBeenTyped) {\n      characterClass = typoIndexes.includes(index) ? 'incorrect' : 'correct';\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: index,\n      className: characterClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, character);\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: typedText,\n    onChange: e => setTypedText(e.target.value),\n    rows: \"10\",\n    placeholder: \"Test your typing skills...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/bo-iliev/code/Projects/typing-test/src/App.js"],"names":["React","useState","useEffect","useCountDown","secondsToCount","paragraph","findTypos","str1","str2","typos","split","forEach","character","index","charAt","push","App","timeLeft","start","reset","typedText","setTypedText","typoIndexes","setTypoIndexes","length","wordsTyped","minMul","wpm","alert","toFixed","map","characterClass","hasBeenTyped","includes","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useCountDown from 'react-countdown-hook';\nimport './App.css';\n\n// to calculate typing speed\n// words typed / minutes\n// words typed = (characters - typos) / 5\n\nconst secondsToCount = 10;\nconst paragraph = `Coding is the best. We are able to build something from scratch. It is literally imagination incarnate. Solving our own problems through coding is one of the coolest things we could do!`;\n\nfunction findTypos(str1, str2) {\n  let typos = [];\n  str2.split('').forEach(function (character, index) {\n    if (character !== str1.charAt(index)) typos.push(index);\n  });\n  return typos;\n}\n\nexport default function App() {\n  const [timeLeft, { start, reset }] = useCountDown(secondsToCount * 1000, 100);\n  const [typedText, setTypedText] = useState('');\n  const [typoIndexes, setTypoIndexes] = useState([]);\n\n  useEffect(() => {\n    setTypoIndexes(findTypos(paragraph, typedText));\n  }, [typedText]);\n\n  useEffect(() => {\n    if (typedText.length === 0) return;\n    if (timeLeft !== 0) return;\n    const wordsTyped = (typedText.length - typoIndexes.length) / 5;\n    const minMul = 60 / secondsToCount;\n    const wpm = wordsTyped * minMul;\n    alert(`You typed at ${wpm.toFixed(2)} WPM.`);\n  }, [timeLeft]);\n\n  return (\n    <div className=\"app\">\n      {/* sidebar */}\n      <div className=\"sidebar\">\n        <div className=\"timer\">{(timeLeft / 1000).toFixed(2)}</div>\n        <button className=\"start\" onClick={() => start()}>\n          Start\n        </button>\n        <button className=\"reset\" onClick={() => reset()}>\n          Reset\n        </button>\n      </div>\n\n      <div className=\"content\">\n        {/* show the paragraph */}\n        <p>\n          {paragraph.split('').map((character, index) => {\n            let characterClass = '';\n            const hasBeenTyped = typedText.length > index;\n            if (hasBeenTyped) {\n              characterClass = typoIndexes.includes(index)\n                ? 'incorrect'\n                : 'correct';\n            }\n            return (\n              <span key={index} className={characterClass}>\n                {character}\n              </span>\n            );\n          })}\n        </p>\n\n        {/* show the textarea */}\n        <form>\n          <textarea\n            value={typedText}\n            onChange={(e) => setTypedText(e.target.value)}\n            rows=\"10\"\n            placeholder=\"Test your typing skills...\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}