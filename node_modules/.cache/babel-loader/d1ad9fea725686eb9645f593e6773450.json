{"ast":null,"code":"var _jsxFileName = \"/Users/bo-iliev/code/Projects/typing-test/src/App.js\";\nimport { func } from 'assert-plus';\nimport { getElementsByTagName } from 'domutils';\nimport React, { useState, useEffect } from 'react';\nimport useCountDown from 'react-countdown-hook';\nimport './App.css'; // to calculate typing speed\n// words typed / minutes\n// words typed = (characters - typos) / 5\n\nconst secondsToCount = 10;\nconst paragraph = ['Coding is the best. We are able to build something from scratch. It is literally imagination incarnate. Solving our own problems through coding is one of the coolest things we could do!', 'JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved.', 'Peter Piper picked a peck of pickled peppers. A peck of pickled peppers Peter Piper picked. If Peter Piper picked a peck of pickled peppers. Where’s the peck of pickled peppers Peter Piper picked?'];\n\nfunction findTypos(str1, str2) {\n  let typos = [];\n  str2.split('').forEach(function (character, index) {\n    if (character !== str1.charAt(index)) typos.push(index);\n  });\n  return typos;\n}\n\nfunction randomNum() {\n  return Math.floor(Math.random() * paragraph.length);\n}\n\nexport default function App() {\n  const [timeLeft, {\n    start,\n    reset\n  }] = useCountDown(secondsToCount * 1000, 100);\n  const [typedText, setTypedText] = useState('');\n  const [typoIndexes, setTypoIndexes] = useState([]);\n  useEffect(() => {\n    setTypoIndexes(findTypos(paragraph[randomNum()], typedText));\n  }, [typedText]);\n  useEffect(() => {\n    if (typedText.length === 0) return;\n    if (timeLeft !== 0) return;\n    const wordsTyped = (typedText.length - typoIndexes.length) / 5;\n    const minMul = 60 / secondsToCount;\n    const wpm = wordsTyped * minMul;\n    alert(`You typed at ${wpm.toFixed(2)} WPM.`);\n  }, [timeLeft]);\n\n  function getFocus() {\n    document.getElementById('TEXT').focus();\n  }\n\n  function startTimer() {\n    setTypedText('');\n    getFocus();\n    start();\n  }\n\n  function resetTimer() {\n    setTypedText('');\n    reset();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, (timeLeft / 1000).toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: () => startTimer(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"reset\",\n    onClick: () => resetTimer(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, paragraph.split('').map((character, index) => {\n    let characterClass = '';\n    const hasBeenTyped = typedText.length > index;\n\n    if (hasBeenTyped) {\n      characterClass = typoIndexes.includes(index) ? 'incorrect' : 'correct';\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: index,\n      className: characterClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, character);\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"TEXT\",\n    value: typedText,\n    onChange: e => setTypedText(e.target.value),\n    rows: \"10\",\n    placeholder: \"Test your typing skills...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/bo-iliev/code/Projects/typing-test/src/App.js"],"names":["func","getElementsByTagName","React","useState","useEffect","useCountDown","secondsToCount","paragraph","findTypos","str1","str2","typos","split","forEach","character","index","charAt","push","randomNum","Math","floor","random","length","App","timeLeft","start","reset","typedText","setTypedText","typoIndexes","setTypoIndexes","wordsTyped","minMul","wpm","alert","toFixed","getFocus","document","getElementById","focus","startTimer","resetTimer","map","characterClass","hasBeenTyped","includes","e","target","value"],"mappings":"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","sourcesContent":["import { func } from 'assert-plus';\nimport { getElementsByTagName } from 'domutils';\nimport React, { useState, useEffect } from 'react';\nimport useCountDown from 'react-countdown-hook';\nimport './App.css';\n\n// to calculate typing speed\n// words typed / minutes\n// words typed = (characters - typos) / 5\n\nconst secondsToCount = 10;\nconst paragraph = [\n  'Coding is the best. We are able to build something from scratch. It is literally imagination incarnate. Solving our own problems through coding is one of the coolest things we could do!',\n  'JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved.',\n  'Peter Piper picked a peck of pickled peppers. A peck of pickled peppers Peter Piper picked. If Peter Piper picked a peck of pickled peppers. Where’s the peck of pickled peppers Peter Piper picked?',\n];\n\nfunction findTypos(str1, str2) {\n  let typos = [];\n  str2.split('').forEach(function (character, index) {\n    if (character !== str1.charAt(index)) typos.push(index);\n  });\n  return typos;\n}\n\nfunction randomNum() {\n  return Math.floor(Math.random() * paragraph.length);\n}\n\nexport default function App() {\n  const [timeLeft, { start, reset }] = useCountDown(secondsToCount * 1000, 100);\n  const [typedText, setTypedText] = useState('');\n  const [typoIndexes, setTypoIndexes] = useState([]);\n\n  useEffect(() => {\n    setTypoIndexes(findTypos(paragraph[randomNum()], typedText));\n  }, [typedText]);\n\n  useEffect(() => {\n    if (typedText.length === 0) return;\n    if (timeLeft !== 0) return;\n    const wordsTyped = (typedText.length - typoIndexes.length) / 5;\n    const minMul = 60 / secondsToCount;\n    const wpm = wordsTyped * minMul;\n    alert(`You typed at ${wpm.toFixed(2)} WPM.`);\n  }, [timeLeft]);\n\n  function getFocus() {\n    document.getElementById('TEXT').focus();\n  }\n\n  function startTimer() {\n    setTypedText('');\n    getFocus();\n    start();\n  }\n\n  function resetTimer() {\n    setTypedText('');\n    reset();\n  }\n\n  return (\n    <div className=\"app\">\n      {/* sidebar */}\n      <div className=\"sidebar\">\n        <div className=\"timer\">{(timeLeft / 1000).toFixed(2)}</div>\n        <button className=\"start\" onClick={() => startTimer()}>\n          Start\n        </button>\n        <button className=\"reset\" onClick={() => resetTimer()}>\n          Reset\n        </button>\n      </div>\n\n      <div className=\"content\">\n        {/* show the paragraph */}\n        <p>\n          {paragraph.split('').map((character, index) => {\n            let characterClass = '';\n            const hasBeenTyped = typedText.length > index;\n            if (hasBeenTyped) {\n              characterClass = typoIndexes.includes(index)\n                ? 'incorrect'\n                : 'correct';\n            }\n            return (\n              <span key={index} className={characterClass}>\n                {character}\n              </span>\n            );\n          })}\n        </p>\n\n        {/* show the textarea */}\n        <form>\n          <textarea\n            id=\"TEXT\"\n            value={typedText}\n            onChange={(e) => setTypedText(e.target.value)}\n            rows=\"10\"\n            placeholder=\"Test your typing skills...\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}